class SudokuGenerator {
  private sudokus = [
    // [
    //   [9, 0, 0, 0, 0, 0, 3, 4, 0],
    //   [0, 5, 1, 9, 4, 3, 0, 0, 6],
    //   [4, 7, 0, 6, 5, 0, 8, 0, 0],
    //   [0, 0, 0, 0, 0, 1, 4, 0, 0],
    //   [0, 1, 9, 0, 6, 0, 0, 3, 0],
    //   [7, 0, 0, 8, 9, 5, 1, 0, 0],
    //   [0, 0, 2, 0, 0, 0, 0, 8, 7],
    //   [5, 6, 8, 7, 0, 4, 0, 0, 3],
    //   [0, 9, 0, 0, 0, 6, 2, 0, 4],
    // ],
    // [
    //   [5, 0, 0, 4, 0, 2, 0, 8, 0],
    //   [0, 8, 2, 6, 9, 0, 0, 0, 0],
    //   [0, 6, 0, 0, 0, 8, 0, 0, 0],
    //   [0, 0, 0, 0, 6, 9, 0, 5, 3],
    //   [0, 0, 6, 0, 0, 0, 1, 0, 0],
    //   [9, 3, 0, 8, 7, 0, 0, 0, 0],
    //   [0, 0, 0, 1, 0, 0, 0, 0, 0],
    //   [0, 0, 0, 0, 2, 4, 3, 7, 0],
    //   [0, 4, 0, 3, 0, 6, 0, 0, 1],
    // ],
    [
      [0, 0, 7, 0, 0, 0, 0, 5, 0],
      [8, 0, 0, 0, 0, 0, 0, 9, 4],
      [0, 0, 0, 6, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 2, 0, 0, 7, 0],
      [0, 0, 0, 0, 0, 7, 4, 0, 0],
      [0, 0, 0, 0, 0, 6, 0, 0, 0],
      [0, 0, 8, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 6, 8, 0, 0, 5],
      [0, 0, 0, 0, 0, 0, 0, 6, 8],
    ],
    [
      [0, 3, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 4, 0, 6, 0, 0, 0, 0],
      [6, 0, 0, 5, 8, 0, 3, 0, 1],
      [5, 6, 0, 0, 1, 2, 0, 0, 0],
      [3, 9, 0, 0, 0, 4, 8, 1, 0],
      [0, 0, 0, 0, 0, 0, 6, 0, 0],
      [0, 0, 0, 0, 4, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 9, 8, 0],
      [4, 0, 0, 0, 3, 5, 0, 6, 2],
    ],
    [
      [4, 0, 6, 0, 0, 8, 0, 0, 0],
      [9, 0, 0, 0, 0, 0, 0, 8, 0],
      [0, 2, 0, 0, 0, 0, 6, 0, 1],
      [0, 4, 0, 0, 2, 0, 0, 0, 0],
      [7, 0, 2, 0, 0, 0, 4, 0, 0],
      [8, 0, 0, 0, 0, 0, 0, 5, 0],
      [0, 0, 0, 6, 9, 5, 8, 0, 0],
      [1, 0, 0, 0, 4, 0, 0, 0, 0],
      [0, 8, 5, 2, 0, 0, 0, 7, 0],
    ],
    [
      [1, 0, 0, 0, 0, 0, 0, 0, 6],
      [0, 0, 6, 0, 9, 0, 0, 0, 0],
      [0, 0, 7, 0, 0, 6, 0, 1, 2],
      [0, 4, 0, 0, 0, 0, 0, 0, 7],
      [0, 0, 0, 2, 0, 0, 0, 0, 0],
      [6, 0, 0, 0, 0, 1, 9, 0, 8],
      [9, 2, 0, 0, 8, 3, 0, 0, 0],
      [0, 1, 0, 0, 0, 0, 8, 0, 0],
      [3, 0, 0, 4, 0, 7, 0, 0, 0],
    ],
    [
      [3, 0, 8, 7, 2, 0, 0, 0, 4],
      [0, 0, 0, 0, 0, 5, 7, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 3, 0, 0, 0, 0, 0, 5, 0],
      [0, 6, 0, 4, 9, 0, 0, 0, 2],
      [0, 0, 0, 0, 0, 0, 0, 0, 0],
      [9, 0, 0, 0, 0, 0, 3, 0, 0],
      [0, 0, 0, 0, 0, 2, 9, 8, 0],
      [8, 0, 7, 0, 3, 9, 5, 0, 6],
    ],
    // [
    //   [5, 2, 0, 0, 9, 0, 0, 4, 0],
    //   [0, 3, 0, 4, 0, 0, 0, 0, 7],
    //   [0, 0, 0, 7, 5, 2, 0, 9, 0],
    //   [0, 0, 0, 5, 0, 4, 0, 0, 0],
    //   [0, 7, 1, 0, 0, 0, 0, 0, 0],
    //   [3, 0, 0, 0, 0, 0, 9, 1, 6],
    //   [0, 0, 5, 0, 0, 6, 2, 0, 0],
    //   [7, 0, 0, 0, 0, 0, 0, 0, 0],
    //   [1, 0, 2, 0, 0, 0, 0, 7, 0],
    // ],
    // [
    //   [0, 0, 0, 0, 0, 6, 8, 0, 0],
    //   [0, 9, 4, 5, 0, 0, 0, 0, 0],
    //   [6, 0, 0, 0, 9, 4, 0, 0, 0],
    //   [0, 6, 0, 2, 0, 0, 0, 0, 0],
    //   [7, 0, 8, 0, 0, 9, 2, 0, 0],
    //   [0, 0, 0, 0, 0, 0, 5, 6, 7],
    //   [0, 0, 0, 0, 0, 8, 0, 0, 0],
    //   [9, 0, 0, 0, 0, 0, 3, 0, 5],
    //   [3, 0, 0, 7, 0, 0, 9, 0, 6],
    // ],
    // [
    //   [0, 0, 7, 0, 6, 3, 0, 0, 0],
    //   [0, 0, 3, 1, 2, 9, 6, 0, 0],
    //   [0, 0, 0, 0, 0, 5, 0, 0, 1],
    //   [0, 9, 6, 0, 5, 7, 0, 1, 0],
    //   [2, 1, 0, 0, 3, 0, 0, 9, 0],
    //   [0, 0, 0, 0, 0, 0, 4, 0, 0],
    //   [0, 6, 0, 0, 9, 0, 3, 5, 0],
    //   [0, 0, 0, 0, 0, 0, 0, 0, 2],
    //   [5, 0, 0, 0, 0, 0, 0, 0, 0],
    // ],
    // [
    //   [5, 4, 0, 0, 9, 0, 0, 0, 8],
    //   [0, 2, 0, 0, 0, 6, 0, 9, 4],
    //   [0, 0, 0, 0, 0, 7, 0, 0, 0],
    //   [8, 9, 0, 0, 0, 0, 0, 2, 0],
    //   [4, 0, 7, 0, 0, 1, 0, 8, 9],
    //   [0, 0, 1, 0, 8, 0, 0, 6, 0],
    //   [0, 0, 0, 0, 2, 0, 0, 7, 0],
    //   [0, 0, 0, 0, 0, 0, 6, 0, 0],
    //   [9, 0, 0, 7, 0, 0, 0, 0, 0],
    // ],
    // [
    //   [0, 0, 0, 0, 7, 0, 0, 0, 4],
    //   [0, 0, 0, 0, 6, 3, 1, 0, 0],
    //   [5, 0, 0, 0, 0, 0, 0, 0, 0],
    //   [0, 0, 1, 0, 3, 6, 8, 0, 0],
    //   [0, 7, 0, 0, 0, 0, 3, 9, 0],
    //   [0, 9, 0, 0, 0, 0, 0, 0, 0],
    //   [7, 0, 0, 0, 0, 0, 0, 5, 1],
    //   [9, 5, 0, 0, 4, 0, 7, 0, 3],
    //   [0, 0, 6, 0, 0, 5, 0, 0, 0],
    // ],
    // [
    //   [0, 0, 1, 0, 0, 0, 6, 2, 0],
    //   [0, 2, 0, 5, 0, 0, 7, 8, 0],
    //   [0, 0, 0, 1, 0, 0, 0, 5, 0],
    //   [0, 0, 2, 0, 1, 0, 0, 0, 5],
    //   [0, 0, 5, 7, 0, 4, 0, 9, 8],
    //   [0, 0, 0, 0, 0, 6, 0, 7, 0],
    //   [0, 8, 7, 6, 0, 0, 0, 0, 0],
    //   [0, 0, 0, 0, 0, 8, 0, 0, 0],
    //   [6, 0, 0, 4, 0, 0, 0, 0, 0],
    // ],
    // [
    //   [7, 0, 5, 3, 2, 0, 9, 0, 0],
    //   [0, 0, 0, 4, 0, 8, 7, 0, 0],
    //   [0, 0, 0, 0, 0, 0, 0, 3, 0],
    //   [0, 2, 0, 0, 0, 0, 0, 0, 7],
    //   [1, 0, 7, 0, 5, 0, 0, 8, 0],
    //   [8, 0, 0, 0, 0, 0, 0, 0, 0],
    //   [0, 1, 0, 0, 0, 0, 0, 0, 0],
    //   [0, 9, 8, 2, 0, 4, 0, 5, 0],
    //   [4, 0, 0, 9, 0, 0, 0, 0, 0],
    // ],
    // [
    //   [6, 0, 0, 0, 0, 0, 7, 5, 0],
    //   [2, 0, 5, 0, 0, 0, 0, 3, 0],
    //   [0, 0, 0, 9, 0, 0, 2, 0, 0],
    //   [0, 0, 0, 2, 0, 0, 3, 0, 7],
    //   [0, 0, 0, 0, 0, 0, 4, 6, 5],
    //   [0, 0, 0, 6, 0, 0, 0, 0, 0],
    //   [5, 0, 6, 3, 0, 0, 0, 0, 0],
    //   [3, 2, 0, 0, 9, 0, 0, 1, 0],
    //   [0, 4, 1, 0, 7, 0, 5, 0, 0],
    // ],
  ];

  generate = () => this.sudokus[Math.floor(Math.random() * this.sudokus.length)];
}

// unfortunately not enough space to generate compleatly random sudoku :(

// class SudokuGenerator {
//   private sudoku: number[][];

//   private generateFull = () => {
//     this.fillDiagonal();
//     this.fillRemaining(0, 3);
//   };

//   private fillDiagonal = () => {
//     for (let i = 0; i < 9; i += 3) this.fillBox(i, i);
//   };

//   private fillRemaining = (i: number, j: number) => {
//     if (j >= 9 && i < 8) {
//       i = i + 1;
//       j = 0;
//     }
//     if (i >= 9 && j >= 9) return true;
//     if (i < 3) {
//       if (j < 3) j = 3;
//     } else if (i < 6) {
//       if (j == Math.floor(i / 3) * 3) j = j + 3;
//     } else {
//       if (j == 6) {
//         i = i + 1;
//         j = 0;
//         if (i >= 9) return true;
//       }
//     }

//     for (let num = 1; num <= 9; num++) {
//       if (this.checkIfSafe(i, j, num)) {
//         this.sudoku[i][j] = num;
//         if (this.fillRemaining(i, j + 1)) return true;

//         this.sudoku[i][j] = 0;
//       }
//     }
//     return false;
//   };

//   private fillBox = (row: number, col: number) => {
//     for (let i = 0; i < 3; i++) {
//       for (let j = 0; j < 3; j++) {
//         let num = 0;
//         do {
//           num = 1 + Math.floor(9 * Math.random());
//         } while (!this.unusedInBox(row, col, num));
//         this.sudoku[row + i][col + j] = num;
//       }
//     }
//   };

//   private checkIfSafe = (i: number, j: number, num: number) => {
//     return this.unusedInRow(i, num) && this.unusedInCol(j, num) && this.unusedInBox(i - (i % 3), j - (j % 3), num);
//   };

//   private unusedInBox = (rowStart: number, colStart: number, num: number) => {
//     for (let i = 0; i < 3; i++) for (let j = 0; j < 3; j++) if (this.sudoku[rowStart + i][colStart + j] == num) return false;
//     return true;
//   };

//   private unusedInRow = (i: number, num: number) => {
//     for (let j = 0; j < 9; j++) if (this.sudoku[i][j] == num) return false;
//     return true;
//   };

//   private unusedInCol = (j: number, num: number) => {
//     for (let i = 0; i < 9; i++) if (this.sudoku[i][j] == num) return false;
//     return true;
//   };

//   generate = () => {
//     this.sudoku = Array<number>(9).map((x) => Array<number>(9));
//     this.generateFull();
//     return this.sudoku;
//   };
// }
